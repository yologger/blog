(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{1236:function(e,t,a){e.exports=a.p+"assets/img/30.83305933.png"},1237:function(e,t,a){e.exports=a.p+"assets/img/31.f5596988.png"},1238:function(e,t,a){e.exports=a.p+"assets/img/32.ddf32d7d.png"},1239:function(e,t,a){e.exports=a.p+"assets/img/33.604ad608.png"},1240:function(e,t,a){e.exports=a.p+"assets/img/34.99a712b3.png"},1241:function(e,t,a){e.exports=a.p+"assets/img/40.7264ca8b.png"},1242:function(e,t,a){e.exports=a.p+"assets/img/41.cda63411.png"},1243:function(e,t,a){e.exports=a.p+"assets/img/42.c8a5e31d.png"},1244:function(e,t,a){e.exports=a.p+"assets/img/43.71b39e83.png"},1245:function(e,t,a){e.exports=a.p+"assets/img/1.ad2b76c7.png"},1246:function(e,t,a){e.exports=a.p+"assets/img/10.25b3b0b3.png"},1247:function(e,t,a){e.exports=a.p+"assets/img/11.dcb67d1d.png"},1248:function(e,t,a){e.exports=a.p+"assets/img/12.9b2353d2.png"},1249:function(e,t,a){e.exports=a.p+"assets/img/13.fcba537b.png"},1250:function(e,t,a){e.exports=a.p+"assets/img/14.f5bbb257.png"},1251:function(e,t,a){e.exports=a.p+"assets/img/15.134a67a1.png"},1695:function(e,t,a){"use strict";a.r(t);var s=a(34),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"table-of-contents"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#table-of-contents"}},[e._v("#")]),e._v(" Table of Contents")]),e._v(" "),s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#zookeeper-kafka-서버-구축해보기"}},[e._v("Zookeeper, Kafka 서버 구축해보기")])]),s("li",[s("a",{attrs:{href:"#kafka-클라이언트-설치"}},[e._v("Kafka 클라이언트 설치")])]),s("li",[s("a",{attrs:{href:"#kafka-사용해보기"}},[e._v("Kafka 사용해보기")])]),s("li",[s("a",{attrs:{href:"#message-broker"}},[e._v("Message Broker")])]),s("li",[s("a",{attrs:{href:"#kafka의-구성요소"}},[e._v("Kafka의 구성요소")]),s("ul",[s("li",[s("a",{attrs:{href:"#kafka-서버"}},[e._v("Kafka 서버")])]),s("li",[s("a",{attrs:{href:"#kafka-클러스터"}},[e._v("Kafka 클러스터")])]),s("li",[s("a",{attrs:{href:"#zookeeper"}},[e._v("Zookeeper")])]),s("li",[s("a",{attrs:{href:"#topic"}},[e._v("Topic")])]),s("li",[s("a",{attrs:{href:"#producer"}},[e._v("Producer")])]),s("li",[s("a",{attrs:{href:"#consumer"}},[e._v("Consumer")])]),s("li",[s("a",{attrs:{href:"#key-value-형식으로-메시지-다루기"}},[e._v("Key-Value 형식으로 메시지 다루기")])]),s("li",[s("a",{attrs:{href:"#partition"}},[e._v("Partition")])]),s("li",[s("a",{attrs:{href:"#consumer-group"}},[e._v("Consumer Group")])]),s("li",[s("a",{attrs:{href:"#offset"}},[e._v("Offset")])]),s("li",[s("a",{attrs:{href:"#replication"}},[e._v("Replication")])])])])])]),s("p"),e._v(" "),s("h1",{attrs:{id:"apache-kafka"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#apache-kafka"}},[e._v("#")]),e._v(" Apache Kafka")]),e._v(" "),s("p",[s("code",[e._v("Apache Kafka")]),e._v("는 아파치 재단의 오픈소스 "),s("code",[e._v("메시지 큐(Message Queue)")]),e._v("다.")]),e._v(" "),s("h2",{attrs:{id:"zookeeper-kafka-서버-구축해보기"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#zookeeper-kafka-서버-구축해보기"}},[e._v("#")]),e._v(" Zookeeper, Kafka 서버 구축해보기")]),e._v(" "),s("p",[e._v("먼저 도커 컴포즈를 사용하여 "),s("code",[e._v("Zookeeper")]),e._v("서버와 "),s("code",[e._v("Kafka")]),e._v(" 서버를 구축해보자.")]),e._v(" "),s("div",{staticClass:"language-yml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker-compose.yml")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("version")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'2'")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("services")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("zookeeper")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("image")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" wurstmeister/zookeeper\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("container_name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" zookeeper\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("ports")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"2181:2181"')]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("kafka")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("image")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" wurstmeister/kafka\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("container_name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" kafka\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("ports")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"9092:9092"')]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("environment")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("KAFKA_ADVERTISED_HOST_NAME")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" 127.0.0.1\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("KAFKA_ZOOKEEPER_CONNECT")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" zookeeper"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2181")]),e._v("\n")])])]),s("p",[e._v("다음 명령어로 도커 컴포스를 백그라운드로 실행할 수 있다.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$ docker-compose up -d\n")])])]),s("p",[e._v("다음 명령어로 포그라운드로 시작하면 로그를 실시간으로 확인할 수 있다.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$ docker-compose up\n")])])]),s("p",[e._v("생성된 컨테이너를 확인해보자. Zookeeper는 "),s("code",[e._v("2181")]),e._v("포트, Kafka는 "),s("code",[e._v("9092")]),e._v(" 포트를 사용한다.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$ docker-compose ps \n  Name                 Command               State                         Ports                       \n-------------------------------------------------------------------------------------------------------\nkafka       start-kafka.sh                   Up      0.0.0.0:9092->9092/tcp                            \nzookeeper   /bin/sh -c /usr/sbin/sshd  ...   Up      0.0.0.0:2181->2181/tcp, 22/tcp, 2888/tcp, 3888/tcp\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('$ docker ps \nCONTAINER ID   IMAGE                                    COMMAND                  CREATED         STATUS         PORTS                                                NAMES\na18bb010ab3e   wurstmeister/zookeeper                   "/bin/sh -c \'/usr/sb…"   3 minutes ago   Up 3 minutes   22/tcp, 2888/tcp, 3888/tcp, 0.0.0.0:2181->2181/tcp   zookeeper\nf17107e94596   wurstmeister/kafka                       "start-kafka.sh"         3 minutes ago   Up 3 minutes   0.0.0.0:9092->9092/tcp                               kafka\n')])])]),s("p",[e._v("참고로 다 사용한 컨테이너는 다음과 같이 종료할 수 있다.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$ docker-compose down\n")])])]),s("h2",{attrs:{id:"kafka-클라이언트-설치"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#kafka-클라이언트-설치"}},[e._v("#")]),e._v(" Kafka 클라이언트 설치")]),e._v(" "),s("p",[s("code",[e._v("Kafka 클라이언트")]),e._v("는 Zookeeper, Kafka 서버 제어를 위한 실행파일들을 제공한다. Mac OS 환경에서 "),s("code",[e._v("Homebrew")]),e._v(" Kafka를 설치하면 Kafka 클라이언트도 포함되어있다.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$ brew install kafka\n")])])]),s("p",[s("code",[e._v("brew info kafka")]),e._v(" 명령어로 Kafka 설치 경로를 확인할 수 있다.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("div",{staticClass:"highlight-lines"},[s("br"),s("br"),s("br"),s("br"),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("br"),s("br"),s("br"),s("br")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$ brew info kafka\nkafka: stable 3.1.0 (bottled)\nOpen-source distributed event streaming platform\nhttps://kafka.apache.org/\n/usr/local/Cellar/kafka/3.1.0 (198 files, 84.2MB) *\n  Poured from bottle on 2022-05-04 at 13:36:01\nFrom: https://github.com/Homebrew/homebrew-core/blob/HEAD/Formula/kafka.rb\n...\n")])])]),s("p",[e._v("설치 경로의 "),s("code",[e._v("bin")]),e._v(" 폴더에서 다양한 실행 파일을 확인할 수 있다.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$ cd /usr/local/Cellar/kafka/3.1.0/bin\n\n$ ls\nconnect-distributed             kafka-console-consumer          kafka-features                  kafka-reassign-partitions       kafka-topics                    zookeeper-server-stop\nconnect-mirror-maker            kafka-console-producer          kafka-get-offsets               kafka-replica-verification      kafka-transactions              zookeeper-shell\nconnect-standalone              kafka-consumer-groups           kafka-leader-election           kafka-run-class                 kafka-verifiable-consumer\nkafka-acls                      kafka-consumer-perf-test        kafka-log-dirs                  kafka-server-start              kafka-verifiable-producer\nkafka-broker-api-versions       kafka-delegation-tokens         kafka-metadata-shell            kafka-server-stop               trogdor\nkafka-cluster                   kafka-delete-records            kafka-mirror-maker              kafka-storage                   zookeeper-security-migration\nkafka-configs                   kafka-dump-log                  kafka-producer-perf-test        kafka-streams-application-reset zookeeper-server-start\n")])])]),s("h2",{attrs:{id:"kafka-사용해보기"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#kafka-사용해보기"}},[e._v("#")]),e._v(" Kafka 사용해보기")]),e._v(" "),s("p",[e._v("이제 Kafka의 메시지 브로커 기능을 사용해보자. 우선 "),s("code",[e._v("Topic")]),e._v("이라는 것을 생성해야한다. Zookeeper, Kafka 서버가 구동되고 있는 상태에서 다음과 같이  test-topic 이라는 이름의 Topic을 생성해보자. "),s("code",[e._v("--bootstrap-server")]),e._v(" 옵션에는 Kafka 서버 주소, "),s("code",[e._v("--topic")]),e._v(" 옵션에는 생성할 Topic의 이름을 전달한다.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$ kafka-topics \\\n--bootstrap-server localhost:9092 \\\n--topic test-topic \\\n--create\nCreated topic test-topic.\n")])])]),s("p",[e._v("그리고 새로운 데이터를 소비하는 "),s("code",[e._v("Consumer")]),e._v("를 실행한다.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$ kafka-console-consumer \\\n--bootstrap-server localhost:9092 \\\n--topic test-topic\n")])])]),s("p",[e._v("그 다음 새로운 터미널을 열고 데이터를 생성하는 "),s("code",[e._v("Producer")]),e._v("를 실행한다. 그리고 세 개의 메시지를 카프카로 전송해보자.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$ kafka-console-producer \\\n--bootstrap-server localhost:9092 \\\n--topic test-topic\n> This is message 1.\n> This is message 2.\n> This is message 3.\n")])])]),s("p",[e._v("이제 Consumer를 확인해보자. 데이터가 소비되는 것을 확인할 수 있다.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$ kafka-console-consumer \\\n--bootstrap-server localhost:9092 \\\n--topic test-topic\nThis is message 1.\nThis is message 2.\nThis is message 3.\n")])])]),s("h2",{attrs:{id:"message-broker"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#message-broker"}},[e._v("#")]),e._v(" Message Broker")]),e._v(" "),s("p",[e._v("이처럼 "),s("b",[s("code",[e._v("메시지 큐(Message Queue)")])]),e._v("는 "),s("u",[e._v("Producer가 생성한 데이터를 Consumer에게 전달하는 시스템이다.")]),e._v(" 메시지 큐는 "),s("code",[e._v("메시지 브로커(Message Broker)")]),e._v("라고도 하며 Apache Kafka, Redis, Rabbit MQ, Active MQ, AWS SQS 등의 제품군이 있다.")]),e._v(" "),s("p",[e._v("Apache Kafka에서 Producer와 Consumer는 서로의 존재를 알지 못한다. Producer는 그저 Kafka에 메시지를 전송한다. Kafka는 메시지가 들어오면 해당 Topic을 구독 중인 Consumer에게 메시지를 전달한다. 이러한 점에서 Apache Kafka의 메시지 전달 방식을 "),s("code",[e._v("Publish/Subscribe")]),e._v(" 모델이라고도 한다.")]),e._v(" "),s("h2",{attrs:{id:"kafka의-구성요소"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#kafka의-구성요소"}},[e._v("#")]),e._v(" Kafka의 구성요소")]),e._v(" "),s("h3",{attrs:{id:"kafka-서버"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#kafka-서버"}},[e._v("#")]),e._v(" Kafka 서버")]),e._v(" "),s("p",[s("code",[e._v("Kafka 서버")]),e._v("는 메시지 브로커 역할을 하며, "),s("code",[e._v("Broker 서버")]),e._v("라고도 한다. ZooKeeper 1대, Broker 서버 1대로 이루어진 클러스터는 다음과 같이 구축할 수 있다.")]),e._v(" "),s("div",{staticClass:"language-yml extra-class"},[s("div",{staticClass:"highlight-lines"},[s("br"),s("br"),s("br"),s("br"),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("br"),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("br")]),s("pre",{pre:!0,attrs:{class:"language-yml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker-compose.yml")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("version")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'2'")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("services")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Zookeeper")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("zookeeper")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("image")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" wurstmeister/zookeeper\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("container_name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" zookeeper\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("ports")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"2181:2181"')]),e._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Kafka")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("kafka")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("image")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" wurstmeister/kafka\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("container_name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" kafka\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("ports")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"9092:9092"')]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("environment")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("KAFKA_ADVERTISED_HOST_NAME")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" 127.0.0.1\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("KAFKA_ZOOKEEPER_CONNECT")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" zookeeper"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2181")]),e._v("\n")])])]),s("p",[s("code",[e._v("wurstmeister/kafka")]),e._v(" 이미지를 사용하는 경우 Kafka가 "),s("code",[e._v("/opt/kafka")]),e._v("에 설치되어있다.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$ docker exec -it kafka /bin/bash\n\nbash-5.1# cd opt/kafka\n\nbash-5.1# ls\nLICENSE    NOTICE     bin        config     libs       licenses   logs       site-docs\n")])])]),s("p",[s("code",[e._v("/opt/kafka/config")]),e._v("의 "),s("b",[s("code",[e._v("server.properties")])]),e._v(" 파일로 Broker 서버의 환경을 설정할 수 있다. 중요한 설정값은 음영처리해놨다.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("div",{staticClass:"highlight-lines"},[s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("br"),s("br"),s("br"),s("br"),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("br"),s("br"),s("br"),s("br"),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("br"),s("br"),s("br"),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("br"),s("br"),s("br"),s("br"),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("br")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('$ cat opt/kafka/config/server.properties\n# Licensed to the Apache Software Foundation (ASF) under one or more\n# contributor license agreements.  See the NOTICE file distributed with\n# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the "License"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an "AS IS" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# see kafka.server.KafkaConfig for additional details and defaults\n\n############################# Server Basics #############################\n\n# The id of the broker. This must be set to a unique integer for each broker.\nbroker.id=-1\n\n############################# Socket Server Settings #############################\n\n# The address the socket server listens on. It will get the value returned from \n# java.net.InetAddress.getCanonicalHostName() if not configured.\n#   FORMAT:\n#     listeners = listener_name://host_name:port\n#   EXAMPLE:\n#     listeners = PLAINTEXT://your.host.name:9092\n#listeners=PLAINTEXT://:9092\n\n# Hostname and port the broker will advertise to producers and consumers. If not set, \n# it uses the value for "listeners" if configured.  Otherwise, it will use the value\n# returned from java.net.InetAddress.getCanonicalHostName().\n#advertised.listeners=PLAINTEXT://your.host.name:9092\n\n# Maps listener names to security protocols, the default is for them to be the same. See the config documentation for more details\n#listener.security.protocol.map=PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL\n\n# The number of threads that the server uses for receiving requests from the network and sending responses to the network\nnum.network.threads=3\n\n# The number of threads that the server uses for processing requests, which may include disk I/O\nnum.io.threads=8\n\n# The send buffer (SO_SNDBUF) used by the socket server\nsocket.send.buffer.bytes=102400\n\n# The receive buffer (SO_RCVBUF) used by the socket server\nsocket.receive.buffer.bytes=102400\n\n# The maximum size of a request that the socket server will accept (protection against OOM)\nsocket.request.max.bytes=104857600\n\n\n############################# Log Basics #############################\n\n# A comma separated list of directories under which to store log files\nlog.dirs=/kafka/kafka-logs-8a7f9df2b449\n\n# The default number of log partitions per topic. More partitions allow greater\n# parallelism for consumption, but this will also result in more files across\n# the brokers.\nnum.partitions=1\n\n# The number of threads per data directory to be used for log recovery at startup and flushing at shutdown.\n# This value is recommended to be increased for installations with data dirs located in RAID array.\nnum.recovery.threads.per.data.dir=1\n\n############################# Internal Topic Settings  #############################\n# The replication factor for the group metadata internal topics "__consumer_offsets" and "__transaction_state"\n# For anything other than development testing, a value greater than 1 is recommended to ensure availability such as 3.\noffsets.topic.replication.factor=1\ntransaction.state.log.replication.factor=1\ntransaction.state.log.min.isr=1\n\n############################# Log Flush Policy #############################\n\n# Messages are immediately written to the filesystem but by default we only fsync() to sync\n# the OS cache lazily. The following configurations control the flush of data to disk.\n# There are a few important trade-offs here:\n#    1. Durability: Unflushed data may be lost if you are not using replication.\n#    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.\n#    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to excessive seeks.\n# The settings below allow one to configure the flush policy to flush data after a period of time or\n# every N messages (or both). This can be done globally and overridden on a per-topic basis.\n\n# The number of messages to accept before forcing a flush of data to disk\n#log.flush.interval.messages=10000\n\n# The maximum amount of time a message can sit in a log before we force a flush\n#log.flush.interval.ms=1000\n\n############################# Log Retention Policy #############################\n\n# The following configurations control the disposal of log segments. The policy can\n# be set to delete segments after a period of time, or after a given size has accumulated.\n# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens\n# from the end of the log.\n\n# The minimum age of a log file to be eligible for deletion due to age\nlog.retention.hours=168\n\n# A size-based retention policy for logs. Segments are pruned from the log unless the remaining\n# segments drop below log.retention.bytes. Functions independently of log.retention.hours.\n#log.retention.bytes=1073741824\n\n# The maximum size of a log segment file. When this size is reached a new log segment will be created.\nlog.segment.bytes=1073741824\n\n# The interval at which log segments are checked to see if they can be deleted according\n# to the retention policies\nlog.retention.check.interval.ms=300000\n\n############################# Zookeeper #############################\n\n# Zookeeper connection string (see zookeeper docs for details).\n# This is a comma separated host:port pairs, each corresponding to a zk\n# server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002".\n# You can also append an optional chroot string to the urls to specify the\n# root directory for all kafka znodes.\nzookeeper.connect=zookeeper:2181\n\n# Timeout in ms for connecting to zookeeper\nzookeeper.connection.timeout.ms=18000\n\n\n############################# Group Coordinator Settings #############################\n\n# The following configuration specifies the time, in milliseconds, that the GroupCoordinator will delay the initial consumer rebalance.\n# The rebalance will be further delayed by the value of group.initial.rebalance.delay.ms as new members join the group, up to a maximum of max.poll.interval.ms.\n# The default value for this is 3 seconds.\n# We override this to 0 here as it makes for a better out-of-the-box experience for development and testing.\n# However, in production environments the default value of 3 seconds is more suitable as this will help to avoid unnecessary, and potentially expensive, rebalances during application startup.\ngroup.initial.rebalance.delay.ms=0\n\nport=9092\nadvertised.host.name=127.0.0.1\n')])])]),s("h3",{attrs:{id:"kafka-클러스터"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#kafka-클러스터"}},[e._v("#")]),e._v(" Kafka 클러스터")]),e._v(" "),s("p",[e._v("Kafka 서버 여러 대를 하나로 묶어 "),s("code",[e._v("Kafka 클러스터")]),e._v("를 구축하면 더 많은 트래픽을 견딜 수 있다.")]),e._v(" "),s("p",[e._v("ZooKeeper 1대, Broker 서버 3대로 이루어진 클러스터는 다음과 같이 구축할 수 있다.")]),e._v(" "),s("div",{staticClass:"language-yml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("version")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'2'")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("services")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("zookeeper")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("container_name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" zookeeper\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("image")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" wurstmeister/zookeeper\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("ports")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"2181:2181"')]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("environment")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" \n        "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("ZOOKEEPER_CLIENT_PORT")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2181")]),e._v(" \n\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("kafka1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("container_name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" kafka1\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("image")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" wurstmeister/kafka\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("ports")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"9092:9092"')]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("volumes")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" /var/run/docker.sock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("/var/run/docker.sock\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("environment")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("KAFKA_BROKER_ID")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("KAFKA_ZOOKEEPER_CONNECT")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" zookeeper"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2181")]),e._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("KAFKA_ADVERTISED_HOST_NAME")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" 127.0.0.1\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("KAFKA_ADVERTISED_PORT")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("9092")]),e._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("KAFKA_ADVERTISED_LISTENERS")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" PLAINTEXT"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("//127.0.0.1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("9092")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("depends_on")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" zookeeper  \n\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("kafka2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("container_name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" kafka2\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("image")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" wurstmeister/kafka\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("ports")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"9093:9092"')]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("volumes")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" /var/run/docker.sock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("/var/run/docker.sock\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("environment")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("KAFKA_BROKER_ID")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("KAFKA_ZOOKEEPER_CONNECT")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" zookeeper"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2181")]),e._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("KAFKA_ADVERTISED_HOST_NAME")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" 127.0.0.1\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("KAFKA_ADVERTISED_PORT")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("9093")]),e._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("KAFKA_ADVERTISED_LISTENERS")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" PLAINTEXT"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("//127.0.0.1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("9093")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("depends_on")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" zookeeper  \n\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("kafka3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("container_name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" kafka3\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("image")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" wurstmeister/kafka\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("ports")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"9094:9092"')]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("volumes")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" /var/run/docker.sock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("/var/run/docker.sock\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("environment")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("KAFKA_BROKER_ID")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("3")]),e._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("KAFKA_ZOOKEEPER_CONNECT")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" zookeeper"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2181")]),e._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("KAFKA_ADVERTISED_HOST_NAME")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" 127.0.0.1\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("KAFKA_ADVERTISED_PORT")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("9094")]),e._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("KAFKA_ADVERTISED_LISTENERS")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" PLAINTEXT"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("//127.0.0.1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("9094")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("depends_on")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" zookeeper  \n")])])]),s("h3",{attrs:{id:"zookeeper"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#zookeeper"}},[e._v("#")]),e._v(" Zookeeper")]),e._v(" "),s("p",[s("code",[e._v("Zookeeper")]),e._v("는 카프카 클러스터를 관리하고 조정하는 분산 코디네이터 시스템이다. "),s("code",[e._v("Zookeeper")]),e._v("의 핵심 역할은 다음과 같다.")]),e._v(" "),s("ul",[s("li",[e._v("여러 Broker 서버를 하나의 클러스터로 코디네이팅")]),e._v(" "),s("li",[e._v("Replication 사용 시 Leader Topic을 결정")])]),e._v(" "),s("p",[s("code",[e._v("wurstmeister/zookeeper")]),e._v(" 이미지를 사용하는 경우 "),s("code",[e._v("/opt/zookeeper-3.4.13")]),e._v(" 경로에 Zookeeper가 설치된다.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$ docker exec -it zookeeper /bin/bash\n\nroot@f932e40590e3:~# /opt/zookeeper-3.4.13\n\nroot@f932e40590e3:/opt/zookeeper-3.4.13# ls\nLICENSE.txt  README.md             bin        conf     data        docs     ivysettings.xml  recipes  zookeeper-3.4.13.jar      zookeeper-3.4.13.jar.md5\nNOTICE.txt   README_packaging.txt  build.xml  contrib  dist-maven  ivy.xml  lib              src      zookeeper-3.4.13.jar.asc  zookeeper-3.4.13.jar.sha1\n")])])]),s("p",[s("code",[e._v("/opt/zookeeper-3.4.13/config")]),e._v("의 "),s("b",[s("code",[e._v("zoo.cfg")])]),e._v(" 파일로 Zookeeper 서버의 환경을 설정할 수 있다.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('root@f932e40590e3:/opt/zookeeper-3.4.13/conf# cat zoo.cfg \n# The number of milliseconds of each tick\ntickTime=2000\n# The number of ticks that the initial \n# synchronization phase can take\ninitLimit=10\n# The number of ticks that can pass between \n# sending a request and getting an acknowledgement\nsyncLimit=5\n# the directory where the snapshot is stored.\n# do not use /tmp for storage, /tmp here is just \n# example sakes.\ndataDir=/opt/zookeeper-3.4.13/data\n# the port at which the clients will connect\nclientPort=2181\n# the maximum number of client connections.\n# increase this if you need to handle more clients\n#maxClientCnxns=60\n#\n# Be sure to read the maintenance section of the \n# administrator guide before turning on autopurge.\n#\n# http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance\n#\n# The number of snapshots to retain in dataDir\nautopurge.snapRetainCount=3\n# Purge task interval in hours\n# Set to "0" to disable auto purge feature\nautopurge.purgeInterval=1\n')])])]),s("h3",{attrs:{id:"topic"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#topic"}},[e._v("#")]),e._v(" Topic")]),e._v(" "),s("p",[e._v("Kafka는 전송되는 메시지를 "),s("code",[e._v("Topic")]),e._v("이라는 개념으로 분류한다. "),s("code",[e._v("Topic")]),e._v("은 다음과 같이 생성한다.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$ kafka-topics --bootstrap-server localhost:9092 --topic <TOPIC> --create\n")])])]),s("p",[e._v("두 개의 "),s("code",[e._v("Topic")]),e._v("을 생성해보자.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$ kafka-topics --bootstrap-server localhost:9092 --topic my-topic --create\n\n$ kafka-topics --bootstrap-server localhost:9092 --topic your-topic --create\n")])])]),s("p",[s("code",[e._v("Topic")]),e._v(" 목록을 확인할 수도 있다.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$ kafka-topics --bootstrap-server localhost:9092 --list\n__consumer_offsets\nmy-topic\nyour-topic\n")])])]),s("p",[s("code",[e._v("Topic")]),e._v("을 삭제할 수도 있다.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$ kafka-topics --bootstrap-server localhost:9092 --topic <TOPIC> --delete\n")])])]),s("h3",{attrs:{id:"producer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#producer"}},[e._v("#")]),e._v(" Producer")]),e._v(" "),s("p",[s("code",[e._v("Producer")]),e._v("는 메시지를 생산하는 주체다. 다음과 같이 Producer를 실행하고 특정 Topic으로 메시지를 전달할 수 있다.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$ kafka-console-producer --bootstrap-server localhost:9092 --topic <TOPIC>\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$ kafka-console-producer --bootstrap-server localhost:9092 --topic test-topic\n> This is message 1\n> This is message 2\n> This is message 3\n")])])]),s("h3",{attrs:{id:"consumer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#consumer"}},[e._v("#")]),e._v(" Consumer")]),e._v(" "),s("p",[s("code",[e._v("Consumer")]),e._v("는 메시지를 소비하는 주체다. 다음과 같이 Consumer를 실행하고 특정 Topic으로 들어온 메시지를 구독할 수 있다.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$ kafka-console-consumer --bootstrap-server localhost:9092 --topic <TOPIC>\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$ kafka-console-consumer --bootstrap-server localhost:9092 --topic test-topic\nThis is message 1\nThis is message 2\nThis is message 3\n")])])]),s("p",[e._v("Consumer는 구독을 시작한 이후 발생된 메시지만을 소비한다는 것에 주의하자. 모든 메시지를 읽어오려면 "),s("code",[e._v("--from-beginning")]),e._v(" 옵션을 사용한다.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$ kafka-console-consumer --bootstrap-server localhost:9092 --topic test-topic --from-beginning\n")])])]),s("h3",{attrs:{id:"key-value-형식으로-메시지-다루기"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#key-value-형식으로-메시지-다루기"}},[e._v("#")]),e._v(" Key-Value 형식으로 메시지 다루기")]),e._v(" "),s("p",[e._v("Kafka는 "),s("code",[e._v("Key-Value")]),e._v(" 형식으로 메시지를 주고 받을 수 있다.")]),e._v(" "),s("p",[e._v("Producer 측에서는 다음 옵션을 추가하면 된다.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('$ kafka-console-producer --bootstrap-server localhost:9092 --topic test-topic \\\n  --property parse.key=true \\\n  --property key.separator=":"\n> name: paul\n> nation: korea\n> address: seoul\n')])])]),s("p",[e._v("Consumer 측에서도 다음 옵션을 추가하면 된다.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('$ kafka-console-consumer --topic example-topic --bootstrap-server broker:9092 \\\n --property print.key=true \\\n --property key.separator="-"\nname-paul\nnation-korea\naddress-seoul\n')])])]),s("h3",{attrs:{id:"partition"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#partition"}},[e._v("#")]),e._v(" Partition")]),e._v(" "),s("p",[e._v("개인적으로 Kafka에서 가장 이해하기 어렵고 중요한 개념은 "),s("code",[e._v("Partition")]),e._v("과 "),s("code",[e._v("Consumer Group")]),e._v("이라고 생각한다.")]),e._v(" "),s("p",[e._v("별도 옵션없이 Topic을 생성하면 하나의 Partition으로 구성된 Topic이 생성된다.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$ kafka-topics \\\n--bootstrap-server localhost:9092 \\\n--topic my-topic \\\n--create\n")])])]),s("p",[s("img",{attrs:{src:a(1236),alt:""}})]),e._v(" "),s("p",[e._v("메시지를 생성하면 Partition에 FIFO 방식으로 저장된다. Queue와 같다고 생각하면 된다.")]),e._v(" "),s("p",[s("img",{attrs:{src:a(1237),alt:""}})]),e._v(" "),s("p",[e._v("Topic은 여러 개의 파티션을 가질 수 있다. Topic을 생성할 때 "),s("code",[e._v("--partitions")]),e._v(" 옵션을 사용하면 된다.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("div",{staticClass:"highlight-lines"},[s("br"),s("br"),s("br"),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("br"),s("br")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$ kafka-topics \\\n--bootstrap-server localhost:9092 \\\n--topic your-topic \\\n--partitions 3 \\\n--create\n")])])]),s("p",[s("img",{attrs:{src:a(1238),alt:""}})]),e._v(" "),s("p",[e._v("다음 명령어로 Partition을 포함한 Topic 상세 정보를 확인할 수 있다.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$ kafka-topics \\\n--describe \\\n--bootstrap-server localhost:9092 \\\n--topic your-topic\nTopic: your-topic\tTopicId: 5qxz0eB3Sr6RF362tClk_A\tPartitionCount: 3\tReplicationFactor: 1\tConfigs: segment.bytes=1073741824\n\tTopic: your-topic\tPartition: 0\tLeader: 1001\tReplicas: 1001\tIsr: 1001\n\tTopic: your-topic\tPartition: 1\tLeader: 1001\tReplicas: 1001\tIsr: 1001\n\tTopic: your-topic\tPartition: 2\tLeader: 1001\tReplicas: 1001\tIsr: 1001\n")])])]),s("p",[e._v("그렇다면 왜 Partition을 사용할까? 바로 "),s("code",[e._v("병렬 처리")]),e._v(" 때문이다.")]),e._v(" "),s("p",[e._v("Topic에 a, b, c, d, e, f, g, .. 의 메시지를 생성한다고 가정해보자. Partition이 1개일 경우 메시지는 다음과 같이 저장된다.")]),e._v(" "),s("p",[s("img",{attrs:{src:a(1239),alt:""}})]),e._v(" "),s("p",[e._v("Partition이 2개 이상일 경우 "),s("u",[e._v("라운드로빈 방식")]),e._v("으로 메시지가 저장된다.")]),e._v(" "),s("p",[s("img",{attrs:{src:a(1240),alt:""}})]),e._v(" "),s("p",[e._v("라운드로빈 방식으로 메시지가 저장된다는 것은 Consumer가 Topic을 구독할 때 메시지가 쓰여진 순서대로 읽혀지진 않는다는 것을 의미한다. 즉 "),s("u",[e._v("메시지의 순서를 보장하지 않는다.")]),e._v(" 따라서 메시지의 순서가 보장되어야 하는 시스템에서는 한계가 존재한다.")]),e._v(" "),s("h3",{attrs:{id:"consumer-group"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#consumer-group"}},[e._v("#")]),e._v(" Consumer Group")]),e._v(" "),s("p",[e._v("Producer가 메시지를 쓰는 속도가 Consumer의 소비 속도보다 빠르면 메시지가 계속 쌓이게 된다.")]),e._v(" "),s("p",[s("img",{attrs:{src:a(1241),alt:""}})]),e._v(" "),s("p",[e._v("Multi Producer & Multi Partition 환경에서는 문제가 더 심각해진다.")]),e._v(" "),s("p",[s("img",{attrs:{src:a(1242),alt:""}})]),e._v(" "),s("p",[s("code",[e._v("Consumer Group")]),e._v("은 "),s("u",[e._v("여러 Consumer의 집합")]),e._v("이다. "),s("u",[e._v("각각의 Consumer는 한 Topic에 대한 데이터를 소비하기 위해 협력한다.")]),e._v(" 즉, "),s("u",[e._v("각 Consumer가 같은 Topic의 서로 다른 Parition을 병렬적으로 담당하게 하여 메시지 생산 속도를 따라갈 수 있다.")])]),e._v(" "),s("p",[s("img",{attrs:{src:a(1243),alt:""}})]),e._v(" "),s("p",[s("img",{attrs:{src:a(1244),alt:""}})]),e._v(" "),s("p",[e._v("예제를 살펴보자. 우선 3개의 Partition으로 구성된 Topic을 생성한다.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$ kafka-topics \\\n--bootstrap-server localhost:9092 \\\n--topic test-topic \\\n--partitions 3 \\\n--create\n")])])]),s("p",[s("code",[e._v("Consumer Group")]),e._v("은 Consumer를 생성할 때 "),s("code",[e._v("--group")]),e._v(" 옵션으로 지정할 수 있다. Consumer Group이 없다면 새로 만들어진다. 새로운 터미널을 열어 다음 명령어를 입력하여 "),s("u",[e._v("첫 번째 Consumer")]),e._v("를 생성한다.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$ kafka-console-consumer \\ \n--bootstrap-server 127.0.0.1:9092 \\\n--topic test-topic \\\n--group test-consumer-group\n")])])]),s("p",[e._v("새로운 터미널을 열어 "),s("u",[e._v("두 번째 Consumer")]),e._v("를 생성한다.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$ kafka-console-consumer \\\n--bootstrap-server 127.0.0.1:9092 \\\n--topic test-topic \\\n--group test-consumer-group\n")])])]),s("p",[e._v("새로운 터미널을 열어 "),s("u",[e._v("세 번째 Consumer")]),e._v("를 생성한다.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$ kafka-console-consumer \\\n--bootstrap-server 127.0.0.1:9092 \\\n--topic test-topic \\\n--group test-consumer-group\n")])])]),s("p",[e._v("새로운 터미널을 열어 Producer를 실행한 후 7개의 메시지 a, b, c, d, e, f, g를 전송해보자.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$ kafka-console-producer --bootstrap-server localhost:9092 --topic test-topic\n>a\n>b\n>c\n>d\n>e\n>f\n>g\n")])])]),s("p",[e._v("첫 번째 Consumer에는 다음과 같이 출력된다.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$ kafka-console-consumer --bootstrap-server 127.0.0.1:9092 --topic test-topic --group test-consumer-group\na\nd\ng\n")])])]),s("p",[e._v("두 번째 Consumer에는 다음과 같이 출력된다.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$ kafka-console-consumer --bootstrap-server 127.0.0.1:9092 --topic test-topic --group test-consumer-group\nb\ne\n")])])]),s("p",[e._v("세 번째 Consumer에는 다음과 같이 출력된다.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$ kafka-console-consumer --bootstrap-server 127.0.0.1:9092 --topic test-topic --group test-consumer-group\nc\nf\n")])])]),s("p",[s("code",[e._v("Consumer Group")]),e._v(" 정보는 다음 명령어로 확인할 수 있다.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$ kafka-consumer-groups --bootstrap-server localhost:9092 --describe --group test-consumer-group\n\nGROUP             TOPIC           PARTITION  CURRENT-OFFSET  LOG-END-OFFSET  LAG             CONSUMER-ID                                           HOST            CLIENT-ID\nmy-consumer-group test-topic      0          35              35              0               console-consumer-9d91eed0-c344-4acb-8019-e907d8539124 /172.20.0.1     console-consumer\nmy-consumer-group my-topic        0          0               0               0               -    \n")])])]),s("h3",{attrs:{id:"offset"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#offset"}},[e._v("#")]),e._v(" Offset")]),e._v(" "),s("p",[s("code",[e._v("Topic")]),e._v("을 생성하면 "),s("code",[e._v("Partition")]),e._v("이라는 큐에 메시지가 저장된다. "),s("code",[e._v("his-topic")]),e._v(" 이라는 Topic을 생성한 후 Producer에서 데이터를 생성해보자.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$ kafka-topics --bootstrap-server localhost:9092 --topic his-topic --create\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$ kafka-console-producer --bootstrap-server localhost:9092 --topic his-topic                          \n>a\n>b\n>c\n>d\n>e\n>f\n>g\n>h\n>i\n>j\n")])])]),s("p",[s("code",[e._v("Partition")]),e._v("에는 다음과 같이 데이터가 저장되어있다. 데이터 하나하나를 "),s("code",[e._v("레코드(Record)")]),e._v("라고 한다.")]),e._v(" "),s("p",[s("img",{attrs:{src:a(1245),alt:""}})]),e._v(" "),s("p",[s("code",[e._v("Offset")]),e._v("은 "),s("u",[e._v("Consumer가 어떤 레코드까지 읽었는지를 나타내는 정수값")]),e._v("이다.")]),e._v(" "),s("p",[e._v("아래 명령어로 Kafka를 구독해보자.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$ kafka-console-consumer --bootstrap-server localhost:9092 --topic his-topic\n")])])]),s("p",[e._v("아무 레코드도 출력되지 않는 것을 확인할 수 있다. 이 명령어는 명령어가 실행되기 전 발행된 레코드를 이미 읽었다고 간주하며, 이후 발행된 레코드가 없기 때문에 아무 결과가 출력되지 않는 것이다.")]),e._v(" "),s("p",[s("code",[e._v("--offset")]),e._v(" 옵션을 사용하면 특정 지점 이후에 발행된 레코드를 소비할 수 있다.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$ kafka-console-consumer --bootstrap-server localhost:9092 --topic his-topic --partition 0 --offset 4\ne\nf\ng\nh\ni\nj\n")])])]),s("p",[s("code",[e._v("--from-beginning")]),e._v(" 옵션으로 Partition의 모든 레코드도 확인할 수 있다.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$ kafka-console-consumer --bootstrap-server localhost:9092 --topic his-topic --partition 0 --from-beginning\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\n")])])]),s("h3",{attrs:{id:"replication"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#replication"}},[e._v("#")]),e._v(" Replication")]),e._v(" "),s("p",[e._v("세 개의 Broker 서버로 구성된 Kafka 클러스터가 있다고 가정하자. Topic은 Broker A 서버에 위치한다.")]),e._v(" "),s("p",[s("img",{attrs:{src:a(1246),alt:""}})]),e._v(" "),s("p",[e._v("만약 Broker A 서버에 장애가 생기면 Topic이 모두 유실된다.")]),e._v(" "),s("p",[s("img",{attrs:{src:a(1247),alt:""}})]),e._v(" "),s("p",[s("code",[e._v("Replication")]),e._v("을 사용하면 "),s("u",[e._v("여러 Broker 서버에 Topic의 복사본을 저장하여 데이터 유실을 방지할 수 있다.")])]),e._v(" "),s("p",[s("img",{attrs:{src:a(1248),alt:""}})]),e._v(" "),s("p",[e._v("Replication 기능은 Topic을 생성할 때 "),s("code",[e._v("--replication-factor")]),e._v(" 옵션으로 지정할 수 있다.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$ kafka-topics --bootstrap-server localhost:9092 --topic <TOPIC 이름> --replication-factor 1 --create\n")])])]),s("p",[e._v("Jookeepr는 여러 Replication 중 하나를 Leader Topic으로 지정한다. 모든 메시지는 이 Leader를 통해서만 전달된다.\n"),s("img",{attrs:{src:a(1249),alt:""}})]),e._v(" "),s("p",[e._v("Leader를 제외한 나머지는 Follower가 된다. Follower는 Leader의 상태가 변했을 때 이를 동기화하여 동일한 상태를 유지한다.")]),e._v(" "),s("p",[s("img",{attrs:{src:a(1250),alt:""}})]),e._v(" "),s("p",[e._v("만약 Leader가 위치한 Broker 서버가 다운되면 Kafka는 Follower 중 하나를 Leader로 승격시킨다.")]),e._v(" "),s("p",[s("img",{attrs:{src:a(1251),alt:""}})])])}),[],!1,null,null,null);t.default=r.exports}}]);