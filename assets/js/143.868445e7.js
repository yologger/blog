(window.webpackJsonp=window.webpackJsonp||[]).push([[143],{1179:function(t,a,e){t.exports=e.p+"assets/img/1.1d587c38.png"},1662:function(t,a,e){"use strict";e.r(a);var r=e(34),n=Object(r.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"table-of-contents"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#table-of-contents"}},[t._v("#")]),t._v(" Table of Contents")]),t._v(" "),r("p"),r("div",{staticClass:"table-of-contents"},[r("ul",[r("li",[r("a",{attrs:{href:"#설정"}},[t._v("설정")])]),r("li",[r("a",{attrs:{href:"#제어의-역전"}},[t._v("제어의 역전")])]),r("li",[r("a",{attrs:{href:"#의존성-주입"}},[t._v("의존성 주입")])]),r("li",[r("a",{attrs:{href:"#bean-pojo"}},[t._v("Bean, POJO")])]),r("li",[r("a",{attrs:{href:"#마치며"}},[t._v("마치며")])])])]),r("p"),t._v(" "),r("h1",{attrs:{id:"spring-core"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring-core"}},[t._v("#")]),t._v(" Spring Core")]),t._v(" "),r("p",[r("code",[t._v("Spring Core")]),t._v("는 스프링 프레임워크의 핵심 모듈이다. 이 모듈의 가장 중요한 개념은 "),r("code",[t._v("제어의 역전(Inversion of Control)")]),t._v("과 "),r("code",[t._v("의존성 주입(Dependency Injection)")]),t._v("이다.")]),t._v(" "),r("h2",{attrs:{id:"설정"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#설정"}},[t._v("#")]),t._v(" 설정")]),t._v(" "),r("p",[r("code",[t._v("Gradle")]),t._v("로 간단한 Java 애플리케이션을 생성하고 "),r("code",[t._v("Spring Core")]),t._v(" 의존성을 추가해보자.")]),t._v(" "),r("div",{staticClass:"language-groovy extra-class"},[r("pre",{pre:!0,attrs:{class:"language-groovy"}},[r("code",[r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// build.gradle")]),t._v("\ndependencies "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Spring Context")]),t._v("\n    implementation "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("'org.springframework:spring-context:5.3.13'")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),r("p",[t._v("참고로 "),r("code",[t._v("spring-context.jar")]),t._v("는 내부적으로 다음과 같은 의존성이 있다.")]),t._v(" "),r("p",[r("img",{attrs:{src:e(1179),alt:""}})]),t._v(" "),r("h2",{attrs:{id:"제어의-역전"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#제어의-역전"}},[t._v("#")]),t._v(" 제어의 역전")]),t._v(" "),r("p",[r("code",[t._v("제어의 역전(Inversion of Control)")]),t._v("은 객체의 생성, 관리, 제거 등의 제어를 개발자가 직접 하지 않고 "),r("code",[t._v("Spring IoC Container")]),t._v("에 위임하는 것이다. 제어의 역전을 위해서는 컨테이너에 객체를 등록해야한다.")]),t._v(" "),r("h2",{attrs:{id:"의존성-주입"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#의존성-주입"}},[t._v("#")]),t._v(" 의존성 주입")]),t._v(" "),r("p",[r("code",[t._v("의존성 주입(Dependency Injection)")]),t._v("은 "),r("code",[t._v("Spring IoC Container")]),t._v("가 적절한 곳에 객체를 주입하는 것이다.")]),t._v(" "),r("h2",{attrs:{id:"bean-pojo"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#bean-pojo"}},[t._v("#")]),t._v(" Bean, POJO")]),t._v(" "),r("p",[t._v("컨테이너에 등록된 객체를 "),r("code",[t._v("빈(Bean)")]),t._v(" 또는 "),r("code",[t._v("POJO(Plain Old Java Object)")]),t._v("라고 한다.")]),t._v(" "),r("h2",{attrs:{id:"마치며"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#마치며"}},[t._v("#")]),t._v(" 마치며")]),t._v(" "),r("p",[t._v("컨테이너에 두 가지 방법으로 빈을 등록할 수 있다.")]),t._v(" "),r("ul",[r("li",[t._v("XML 파일을 통한 빈 등록")]),t._v(" "),r("li",[t._v("Annotation을 통한 빈 등록")])]),t._v(" "),r("p",[t._v("다음 포스트에서 두 가지 방법에 대해 알아보겠다.")])])}),[],!1,null,null,null);a.default=n.exports}}]);