(window.webpackJsonp=window.webpackJsonp||[]).push([[265],{1764:function(e,a,l){"use strict";l.r(a);var v=l(34),t=Object(v.a)({},(function(){var e=this,a=e.$createElement,l=e._self._c||a;return l("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[l("h1",{attrs:{id:"table-of-contents"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#table-of-contents"}},[e._v("#")]),e._v(" Table of Contents")]),e._v(" "),l("p"),l("div",{staticClass:"table-of-contents"},[l("ul",[l("li",[l("a",{attrs:{href:"#build-lifecycle"}},[e._v("Build Lifecycle")])]),l("li",[l("a",{attrs:{href:"#phase"}},[e._v("Phase")])]),l("li",[l("a",{attrs:{href:"#binding"}},[e._v("Binding")])])])]),l("p"),e._v(" "),l("h2",{attrs:{id:"build-lifecycle"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#build-lifecycle"}},[e._v("#")]),e._v(" Build Lifecycle")]),e._v(" "),l("p",[e._v("Maven은 사전에 정의된 순서대로 프로젝트를 빌드한 후 배포한다. 이 과정을 "),l("code",[e._v("Build Lifecycle")]),e._v("이라고 한다. Maven은 기본적으로 사전에 정의된 세 개의 Lifecycle을 제공한다.")]),e._v(" "),l("ul",[l("li",[l("code",[e._v("default")]),e._v(": 프로젝트를 빌드하여 결과물을 생성한다.")]),e._v(" "),l("li",[l("code",[e._v("clean")]),e._v(": 생성된 빌드 결과물을 제거한다.")]),e._v(" "),l("li",[l("code",[e._v("site")]),e._v(": 문서화 사이트를 생성한다.")])]),e._v(" "),l("h2",{attrs:{id:"phase"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#phase"}},[e._v("#")]),e._v(" Phase")]),e._v(" "),l("p",[e._v("Build Lifecycle은 여러 단계의 "),l("code",[e._v("Phase")]),e._v("로 구성된다. 예를 들어 "),l("code",[e._v("default")]),e._v(" Build Lifecycle은 다음과 같은 Phase들로 구성된다.")]),e._v(" "),l("ul",[l("li",[l("code",[e._v("validate")]),e._v(": 프로젝트가 정확한지 검증한다.")]),e._v(" "),l("li",[l("code",[e._v("compile")]),e._v(": 프로젝트를 컴파일한다.")]),e._v(" "),l("li",[l("code",[e._v("test")]),e._v(": JUnit 같은 테스팅 라이브러리로 컴파일된 프로젝트를 검증한다.")]),e._v(" "),l("li",[l("code",[e._v("package")]),e._v(": 프로젝트를 패키징한다.")]),e._v(" "),l("li",[l("code",[e._v("verify")]),e._v(": 통합테스트를 진행한다.")]),e._v(" "),l("li",[l("code",[e._v("install")]),e._v(": 로컬 환경에 패키지를 설치한다.")]),e._v(" "),l("li",[l("code",[e._v("deploy")]),e._v(": 운영 환경에 패키지를 배포한다.")])]),e._v(" "),l("p",[l("code",[e._v("Phase")]),e._v("는 커맨드 명령어를 통해 호출할 수 있다. 예를 들어 "),l("code",[e._v("compile")]),e._v(" phase는 다음과 같이 호출한다.")]),e._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[e._v("$ mvn compile \n")])])]),l("h2",{attrs:{id:"binding"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#binding"}},[e._v("#")]),e._v(" Binding")]),e._v(" "),l("p",[e._v("사실 Phase는 추상적인 개념이며, Phase를 실행하면 연결된 Plugin의 Goal이 실행된다. 이처럼 Phase와 Goal을 연결하는 작업을 "),l("code",[e._v("Binding")]),e._v("이라고 한다.")]),e._v(" "),l("p",[e._v("예를 들어 "),l("code",[e._v("clean")]),e._v(" phase 호출하면 "),l("code",[e._v("maven-clean-plugin")]),e._v("의 "),l("code",[e._v("clean")]),e._v(" goal이 실행된다.")]),e._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[e._v("// Phase 호출\n$ mvn clean\n\n// Plugin:Goal 호출\n$ mvn clean:clean \n")])])]),l("p",[l("code",[e._v("compile")]),e._v(" phase를 호출하면 "),l("code",[e._v("maven-compiler-plugin")]),e._v("의 "),l("code",[e._v("compile")]),e._v(" goal이 실행된다.")]),e._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[e._v("// Phase 호출\n$ mvn compile\n\n// Plugin:Goal 호출\n$ mvn compiler:compile\n")])])]),l("p",[l("code",[e._v("package")]),e._v(" phase를 호출하면 "),l("code",[e._v("maven-jar-plugin")]),e._v("의 "),l("code",[e._v("jar")]),e._v(" goal이 실행된다.")]),e._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[e._v("// Phase 호출\n$ mvn package\n\n// Plugin:Goal 호출\n$ mvn jar:jar\n")])])]),l("p",[e._v("Maven에는 기본적으로 내장된 Binding이 있다. "),l("a",{attrs:{href:"https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html#built-in-lifecycle-bindings",target:"_blank",rel:"noopener noreferrer"}},[e._v("이 곳"),l("OutboundLink")],1),e._v("에서 확인할 수 있다.")])])}),[],!1,null,null,null);a.default=t.exports}}]);