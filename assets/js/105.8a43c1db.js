(window.webpackJsonp=window.webpackJsonp||[]).push([[105],{1399:function(a,s,t){a.exports=t.p+"assets/img/1.c6dc290a.png"},1400:function(a,s,t){a.exports=t.p+"assets/img/2.3591c764.png"},1731:function(a,s,t){"use strict";t.r(s);var n=t(34),e=Object(n.a)({},(function(){var a=this,s=a.$createElement,n=a._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[n("h1",{attrs:{id:"table-of-contents"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#table-of-contents"}},[a._v("#")]),a._v(" Table of Contents")]),a._v(" "),n("p"),n("div",{staticClass:"table-of-contents"},[n("ul",[n("li",[n("a",{attrs:{href:"#spring-boot-프로젝트를-docker-이미지로-만들기"}},[a._v("Spring Boot 프로젝트를 Docker 이미지로 만들기")]),n("ul",[n("li",[n("a",{attrs:{href:"#dokcerfile-사용하기"}},[a._v("Dokcerfile 사용하기")])]),n("li",[n("a",{attrs:{href:"#gradle-bootbuildimage"}},[a._v("Gradle bootBuildImage")])])])]),n("li",[n("a",{attrs:{href:"#github-actions로-docker-hub에-배포하기"}},[a._v("Github Actions로 Docker Hub에 배포하기")])]),n("li",[n("a",{attrs:{href:"#쿠버네티스에서-도커-이미지-pull-하기"}},[a._v("쿠버네티스에서 도커 이미지 Pull 하기")])]),n("li",[n("a",{attrs:{href:"#쿠버네티스에서-이미지-실행하기"}},[a._v("쿠버네티스에서 이미지 실행하기")])])])]),n("p"),a._v(" "),n("h1",{attrs:{id:"dockerize-springboot-deploy-to-kubernetes"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#dockerize-springboot-deploy-to-kubernetes"}},[a._v("#")]),a._v(" Dockerize Springboot & Deploy to Kubernetes")]),a._v(" "),n("p",[a._v("스프링 프로젝트를 도커 이미지로 빌드하고, 쿠버네티스 클러스터에 배포하는 과정에 대해 정리한다.")]),a._v(" "),n("h2",{attrs:{id:"spring-boot-프로젝트를-docker-이미지로-만들기"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-프로젝트를-docker-이미지로-만들기"}},[a._v("#")]),a._v(" Spring Boot 프로젝트를 Docker 이미지로 만들기")]),a._v(" "),n("p",[a._v("다음과 같은 간단한 Spring Boot 프로젝트가 있다.")]),a._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// Application.java")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@SpringBootApplication")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Application")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("SpringApplication")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("run")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Application")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// TestController.java")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@RestController")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@RequestMapping")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/test"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("TestController")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@GetMapping")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/test1"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("test1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[a._v('"test1"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),n("p",[a._v("포트는 5000으로 설정되어있다.")]),a._v(" "),n("div",{staticClass:"language-properties extra-class"},[n("pre",{pre:!0,attrs:{class:"language-properties"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# application.properties")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("server.port")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token attr-value"}},[a._v("5000")]),a._v("\n")])])]),n("p",[a._v("이 스프링 부트 프로젝트를 도커 이미지화 시키는 방법에는 두 가지가 있다.")]),a._v(" "),n("ul",[n("li",[a._v("Dockerfile 사용하기")]),a._v(" "),n("li",[a._v("Gradle bootBuildImage")])]),a._v(" "),n("h3",{attrs:{id:"dokcerfile-사용하기"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#dokcerfile-사용하기"}},[a._v("#")]),a._v(" Dokcerfile 사용하기")]),a._v(" "),n("p",[a._v("첫 단계는 프로젝트를 빌드하여 "),n("code",[a._v("JAR")]),a._v(" 파일을 생성하는 것이다.")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("$ ./gradlew clean\n$ ./gradlew build\n")])])]),n("p",[n("code",[a._v("build/libs")]),a._v("에서 "),n("code",[a._v("JAR")]),a._v("를 확인할 수 있다.")]),a._v(" "),n("p",[n("img",{attrs:{src:t(1399),alt:""}})]),a._v(" "),n("p",[a._v("이제 "),n("code",[a._v("Dockerfile")]),a._v("을 작성한다.")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('FROM openjdk:8-jdk-alpine\nARG JAR_FILE=build/libs/*.jar\nCOPY ${JAR_FILE} app.jar\nENTRYPOINT ["java","-jar","/app.jar"]\n')])])]),n("p",[a._v("그 다음 도커 이미지를 생성한다.")]),a._v(" "),n("div",{staticClass:"language-shellsession extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shellsession"}},[n("code",[n("span",{pre:!0,attrs:{class:"token command"}},[n("span",{pre:!0,attrs:{class:"token shell-symbol important"}},[a._v("$")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token bash language-bash"}},[n("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" build -t springboot-image:0.1 "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(".")]),a._v("                                     ")])]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token output"}},[a._v("[+] Building 1.0s (7/7) FINISHED                                                                                                                                                                                                                                                                                        \n => [internal] load build definition from Dockerfile                                                                                                                                                                                                                                                               0.0s\n => => transferring dockerfile: 36B                                                                                                                                                                                                                                                                                0.0s\n => [internal] load .dockerignore                                                                                                                                                                                                                                                                                  0.0s\n => => transferring context: 2B                                                                                                                                                                                                                                                                                    0.0s\n => [internal] load metadata for docker.io/library/openjdk:8-jdk-alpine                                                                                                                                                                                                                                            0.9s\n => [internal] load build context                                                                                                                                                                                                                                                                                  0.0s\n => => transferring context: 119B                                                                                                                                                                                                                                                                                  0.0s\n => [1/2] FROM docker.io/library/openjdk:8-jdk-alpine@sha256:94792824df2df33402f201713f932b58cb9de94a0cd524164a0f2283343547b3                                                                                                                                                                                      0.0s\n => CACHED [2/2] COPY build/libs/*.jar app.jar                                                                                                                                                                                                                                                                     0.0s\n => exporting to image                                                                                                                                                                                                                                                                                             0.0s\n => => exporting layers                                                                                                                                                                                                                                                                                            0.0s\n => => writing image sha256:87a6c94ce7cc1a9d6634bdecc8e263cb5fa7ec8d8486ad713252637f194bc1ff                                                                                                                                                                                                                       0.0s\n => => naming to docker.io/library/springboot-image:0.1            \n")])])])]),n("p",[a._v("도커 이미지가 잘 생성되었는지 확인한다.")]),a._v(" "),n("div",{staticClass:"language-shellsession extra-class"},[n("div",{staticClass:"highlight-lines"},[n("br"),n("br"),n("div",{staticClass:"highlighted"},[a._v(" ")]),n("br")]),n("pre",{pre:!0,attrs:{class:"language-shellsession"}},[n("code",[n("span",{pre:!0,attrs:{class:"token command"}},[n("span",{pre:!0,attrs:{class:"token shell-symbol important"}},[a._v("$")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token bash language-bash"}},[n("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" images")])]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token output"}},[a._v("REPOSITORY                 TAG              IMAGE ID       CREATED              SIZE\nspringboot-image           0.1              87a6c94ce7cc   About a minute ago   122MB\n")])])])]),n("p",[a._v("도커 이미지로 컨테이너를 생성하고 실행한다. 이 때 호스트의 포트로 접근 시 컨테이너 내부 스프링 부트로 포워딩되도록 포트를 바인딩해야한다.")]),a._v(" "),n("div",{staticClass:"language-shellsession extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shellsession"}},[n("code",[n("span",{pre:!0,attrs:{class:"token command"}},[n("span",{pre:!0,attrs:{class:"token shell-symbol important"}},[a._v("$")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token bash language-bash"}},[n("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" run -d --name springboot-container -p "),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("9999")]),a._v(":5000 springboot-image:0.1")])]),a._v("\n")])])]),n("p",[a._v("도커 컨테이너가 정상적으로 실행되었는지 확인하자.")]),a._v(" "),n("div",{staticClass:"language-shellsession extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shellsession"}},[n("code",[n("span",{pre:!0,attrs:{class:"token command"}},[n("span",{pre:!0,attrs:{class:"token shell-symbol important"}},[a._v("$")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token bash language-bash"}},[n("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("ps")]),a._v(" -al     ")])]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token output"}},[a._v('CONTAINER ID   IMAGE                  COMMAND                CREATED          STATUS          PORTS                    NAMES\nb2d971ca343f   springboot-image:0.1   "java -jar /app.jar"   53 seconds ago   Up 53 seconds   0.0.0.0:9999->8080/tcp   springboot-container\n')])])])]),n("p",[n("code",[a._v("docker logs [container_name]")]),a._v(" 명령어로 로그를 확인할 수 있다.")]),a._v(" "),n("div",{staticClass:"language-shellsession extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shellsession"}},[n("code",[n("span",{pre:!0,attrs:{class:"token command"}},[n("span",{pre:!0,attrs:{class:"token shell-symbol important"}},[a._v("$")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token bash language-bash"}},[n("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" logs springboot-container")])]),a._v("\n\n"),n("span",{pre:!0,attrs:{class:"token output"}},[a._v("  .   ____          _            __ _ _\n /\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\n \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n  '  |____| .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n :: Spring Boot ::                (v2.6.6)\n\n2022-04-13 09:07:14.418  INFO 1 --- [           main] com.yologger.spring_docker.Application   : Starting Application using Java 1.8.0_212 on b2d971ca343f with PID 1 (/app.jar started by root in /)\n2022-04-13 09:07:14.423  INFO 1 --- [           main] com.yologger.spring_docker.Application   : No active profile set, falling back to 1 default profile: \"default\"\n2022-04-13 09:07:15.908  INFO 1 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)\n2022-04-13 09:07:15.928  INFO 1 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]\n2022-04-13 09:07:15.929  INFO 1 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.60]\n2022-04-13 09:07:16.120  INFO 1 --- [           main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext\n2022-04-13 09:07:16.121  INFO 1 --- [           main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1626 ms\n2022-04-13 09:07:17.242  INFO 1 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''\n2022-04-13 09:07:17.276  INFO 1 --- [           main] com.yologger.spring_docker.Application   : Started Application in 3.339 seconds (JVM running for 3.887)\n2022-04-13 09:07:26.102  INFO 1 --- [nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'\n2022-04-13 09:07:26.103  INFO 1 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'\n2022-04-13 09:07:26.108  INFO 1 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 4 ms \n")])])])]),n("p",[a._v("웹 브라우저에서 접속도 해보자.")]),a._v(" "),n("p",[n("img",{attrs:{src:t(1400),alt:""}})]),a._v(" "),n("p",[a._v("컨테이너를 종료한다.")]),a._v(" "),n("div",{staticClass:"language-shellsession extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shellsession"}},[n("code",[n("span",{pre:!0,attrs:{class:"token command"}},[n("span",{pre:!0,attrs:{class:"token shell-symbol important"}},[a._v("$")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token bash language-bash"}},[n("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" stop springboot-container")])]),a._v("\n")])])]),n("p",[a._v("다 사용한 컨테이너는 삭제한다.")]),a._v(" "),n("div",{staticClass:"language-shellsession extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shellsession"}},[n("code",[n("span",{pre:!0,attrs:{class:"token command"}},[n("span",{pre:!0,attrs:{class:"token shell-symbol important"}},[a._v("$")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token bash language-bash"}},[n("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("rm")]),a._v(" springboot-container")])]),a._v("\n")])])]),n("p",[a._v("마지막으로 이미지도 삭제한다.")]),a._v(" "),n("div",{staticClass:"language-shellsession extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shellsession"}},[n("code",[n("span",{pre:!0,attrs:{class:"token command"}},[n("span",{pre:!0,attrs:{class:"token shell-symbol important"}},[a._v("$")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token bash language-bash"}},[n("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" rmi springboot-image:0.1")])]),a._v("\n")])])]),n("h3",{attrs:{id:"gradle-bootbuildimage"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#gradle-bootbuildimage"}},[a._v("#")]),a._v(" Gradle bootBuildImage")]),a._v(" "),n("p",[n("code",[a._v("스프링부트 2.3")]),a._v(" 부터는 Gradle의 "),n("code",[a._v("bootBuildImage")]),a._v(" 태스크로 쉽게 도커 이미지를 생성할 수 있다.")]),a._v(" "),n("p",[a._v("예제를 살펴보자. 스프링부트 프로젝트의 정보는 다음과 같다.")]),a._v(" "),n("div",{staticClass:"language-groovy extra-class"},[n("pre",{pre:!0,attrs:{class:"language-groovy"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// settings.gradle")]),a._v("\nrootProject"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("name "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[a._v("'my_project'")]),a._v("\n")])])]),n("div",{staticClass:"language-groovy extra-class"},[n("pre",{pre:!0,attrs:{class:"language-groovy"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// build.gradle")]),a._v("\ngroup "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[a._v("'com.yologger'")]),a._v("\nversion "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[a._v("'0.0.1'")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 중략 ...")]),a._v("\n")])])]),n("p",[a._v("이제 "),n("code",[a._v("bootBuildImage")]),a._v(" 태스트를 실행한다.")]),a._v(" "),n("div",{staticClass:"language-shellsession extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shellsession"}},[n("code",[n("span",{pre:!0,attrs:{class:"token command"}},[n("span",{pre:!0,attrs:{class:"token shell-symbol important"}},[a._v("$")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token bash language-bash"}},[a._v("./gradlew bootBuildImage")])]),a._v("\n")])])]),n("p",[a._v("이미지가 생성된 것을 확인할 수 있다.")]),a._v(" "),n("div",{staticClass:"language-shellsession extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shellsession"}},[n("code",[n("span",{pre:!0,attrs:{class:"token command"}},[n("span",{pre:!0,attrs:{class:"token shell-symbol important"}},[a._v("$")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token bash language-bash"}},[n("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" images")])]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token output"}},[a._v("REPOSITORY                 TAG              IMAGE ID       CREATED        SIZE\nmy_project                 0.0.1            69971d4876cc   42 years ago   225MB\n")])])])]),n("p",[a._v("컨테이너를 실행해보자")]),a._v(" "),n("div",{staticClass:"language-shellsession extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shellsession"}},[n("code",[n("span",{pre:!0,attrs:{class:"token command"}},[n("span",{pre:!0,attrs:{class:"token shell-symbol important"}},[a._v("$")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token bash language-bash"}},[n("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" run -d --name my_container -p "),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("9999")]),a._v(":8080 my_project:0.0.1")])]),a._v("\n")])])]),n("p",[a._v("컨테이너가 시작된 것을 확인할 수 있다.")]),a._v(" "),n("div",{staticClass:"language-shellsession extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shellsession"}},[n("code",[n("span",{pre:!0,attrs:{class:"token command"}},[n("span",{pre:!0,attrs:{class:"token shell-symbol important"}},[a._v("$")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token bash language-bash"}},[n("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("ps")]),a._v(" -al")])]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token output"}},[a._v('CONTAINER ID   IMAGE              COMMAND              CREATED          STATUS          PORTS                    NAMES\n1e55d016e40d   my_project:0.0.1   "/cnb/process/web"   50 seconds ago   Up 49 seconds   0.0.0.0:9999->8080/tcp   my_container\n')])])])]),n("p",[n("code",[a._v("build.gradle")]),a._v("에서 "),n("code",[a._v("bootBuildImage")]),a._v("와 관련된 커스터마이징이 가능하다.")]),a._v(" "),n("div",{staticClass:"language-groovy extra-class"},[n("pre",{pre:!0,attrs:{class:"language-groovy"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// build.gradle")]),a._v("\nbootBuildImage "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 이미지 이름 설정")]),a._v("\n    imageName"),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("my_project_image\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),n("p",[a._v("명령어로 속성을 전달할 수도 있다.")]),a._v(" "),n("div",{staticClass:"language-shellsession extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shellsession"}},[n("code",[n("span",{pre:!0,attrs:{class:"token command"}},[n("span",{pre:!0,attrs:{class:"token shell-symbol important"}},[a._v("$")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token bash language-bash"}},[a._v("./gradlew bootBuildImage -imageName"),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("my_project_image")])]),a._v("\n")])])]),n("h2",{attrs:{id:"github-actions로-docker-hub에-배포하기"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#github-actions로-docker-hub에-배포하기"}},[a._v("#")]),a._v(" Github Actions로 Docker Hub에 배포하기")]),a._v(" "),n("p",[n("code",[a._v("Dockerfile")]),a._v("은 다음과 같다.")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('FROM openjdk:8-jdk-alpine\nARG JAR_FILE=build/libs/*.jar\nCOPY ${JAR_FILE} app.jar\nENTRYPOINT ["java","-Dspring.profiles.active=prod",  "-jar","/app.jar"]\n')])])]),n("p",[n("code",[a._v("Github Actions")]),a._v(" 관련 코드는 다음과 같다.")]),a._v(" "),n("div",{staticClass:"language-yaml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-yaml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("name")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" CI\n\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("on")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("push")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("branches")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v(" main "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("pull_request")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("branches")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v(" main "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("workflow_dispatch")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("jobs")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("build")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("runs-on")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" ubuntu"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("latest\n\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("steps")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("uses")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" actions/checkout@v2\n\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("name")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" Set up JDK 1.8\n        "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("uses")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" actions/setup"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("java@v1\n        "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("with")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n          "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("java-version")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("1.8")]),a._v("\n\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("name")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" Grant execute permission for gradlew\n        "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("run")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" chmod +x gradlew\n\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("name")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" Add properties file\n        "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("run")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" echo '$"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" secrets.APPLICATION_PROD_PROPERTIES "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("' "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")]),a._v(" ./src/main/resources/application"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("prod.properties\n\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("name")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" Build with Gradle\n        "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("run")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" ./gradlew clean build\n\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("name")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" Docker build\n        "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("run")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("|")]),n("span",{pre:!0,attrs:{class:"token scalar string"}},[a._v("\n          docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_PASSWORD }}  \n          docker build -t springboot_image .\n          docker tag springboot_image yologger1013/springboot_image:${GITHUB_SHA::7} \n          docker push yologger1013/springboot_image:${GITHUB_SHA::7}")]),a._v("\n")])])]),n("p",[a._v("이미지가 업로드된 것을 확인할 수 있다.")]),a._v(" "),n("p",[n("img",{attrs:{src:t(396),alt:""}})]),a._v(" "),n("p",[n("code",[a._v("application.properties")]),a._v(" 같은 설정파일을 Github의 Secret으로 암호화했어도 Docker Hub에 업로드된 이미지를 실행하여 확인할 수 있다. 따라서 "),n("code",[a._v("Container Registry 서비스")]),a._v("의 사설 저장소 사용을 권장한다.")]),a._v(" "),n("h2",{attrs:{id:"쿠버네티스에서-도커-이미지-pull-하기"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#쿠버네티스에서-도커-이미지-pull-하기"}},[a._v("#")]),a._v(" 쿠버네티스에서 도커 이미지 Pull 하기")]),a._v(" "),n("p",[a._v("쿠버네티스에서 도커 허브의 이미지를 Pull 해보자. 먼저 로그인을 한다.")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("$ docker login\nLogin with your Docker ID to push and pull images from Docker Hub. If you don't have a Docker ID, head over to https://hub.docker.com to create one.\nUsername: <YOUR_USERNAME>\nPassword: <YOUR_PASSWORD>\n")])])]),n("p",[a._v("이제 "),n("code",[a._v("docker pull")]),a._v(" 명령어로 이미지를 Pull 한다.")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("$ docker pull yologger1013/springboot_image:843b71d\n")])])]),n("p",[a._v("이미지가 다운된 것을 확인할 수 있다.")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("$ docker images\nREPOSITORY                      TAG       IMAGE ID      CREATED         SIZE\nyologger1013/springboot_image   843b71d   0d39900f7747  8 minutes ago   122MB\n...\n")])])]),n("h2",{attrs:{id:"쿠버네티스에서-이미지-실행하기"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#쿠버네티스에서-이미지-실행하기"}},[a._v("#")]),a._v(" 쿠버네티스에서 이미지 실행하기")]),a._v(" "),n("p",[a._v("다음과 같이 "),n("code",[a._v("springboot.yml")]),a._v("을 작성한다.")]),a._v(" "),n("div",{staticClass:"language-yml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-yml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("apiVersion")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" apps/v1\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("kind")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" Deployment\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("metadata")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("name")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" springboot"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("deployment\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("spec")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("replicas")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("selector")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("matchLabels")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("app")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" springboot"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("app"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("label\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("template")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("metadata")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("name")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" \n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("labels")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" \n        "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("app")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" springboot"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("app"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("label\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("spec")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("containers")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("name")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" springboot"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("app\n          "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("image")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" yologger1013/springboot_image"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("843b71d\n          "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("ports")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n          "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("containerPort")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("8080")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("---")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("apiVersion")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" v1\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("kind")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" Service\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("metadata")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("name")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" springboot"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("service\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("spec")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("ports")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("name")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" springboot"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("service"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("port\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("port")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("20000")]),a._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("targetPort")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("8080")]),a._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("selector")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("app")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" springboot"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("app"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("label\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("type")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" NodePort\n")])])]),n("p",[a._v("외부로 노출되는 포트를 확인한다.")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("$ kubectl get services\nNAME                 TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)           AGE\nkubernetes           ClusterIP   10.96.0.1      <none>        443/TCP           3d1h\nspringboot-service   NodePort    10.99.31.235   <none>        20000:30691/TCP   6m43s\n")])])]),n("p",[a._v("이제 "),n("code",[a._v("<워커 노드 IP>:<포트>")]),a._v(" 형태로 접근할 수 있다.")]),a._v(" "),n("p",[n("img",{attrs:{src:t(396),alt:""}})])])}),[],!1,null,null,null);s.default=e.exports},396:function(a,s,t){a.exports=t.p+"assets/img/3.33662a1b.png"}}]);